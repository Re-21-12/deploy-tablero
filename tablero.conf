# REDIRECCIÓN DE HTTP → HTTPS (mantener acceso HTTP opcional)
server {
    listen 80;
    listen [::]:80;
    server_name corazondeseda.lat www.corazondeseda.lat;

    # Redirige todo a HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# SERVIDOR HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name corazondeseda.lat www.corazondeseda.lat;

    # Certificados Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/corazondeseda.lat/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/corazondeseda.lat/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # FRONTEND Angular
    location / {
        proxy_pass http://localhost:4200;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # BACKEND ASP.NET
    location /api/ {
        # Reescribe /api al path raíz del backend
        rewrite ^/api(/.*)$ $1 break;
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Opcional: permitir WebSocket
    location /ws/ {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
